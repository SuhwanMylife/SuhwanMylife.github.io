---
layout: post
title: "CJ대한통운 공모전 (라우팅 최적화 알고리즘 설계)"
---

<br>

위 공모전을 참가함으로써 다음의 것들을 얻었습니다.

1. Python 다루는 방법
2. 알고리즘에 대한 이해
3. 연구 분야 선정

제시된 문제를 GNN을 활용하여 해결하는 것을 고려했으나 주어진 데이터의 양과 대회의 세부 사항을 고려하여 휴리스틱하게 알고리즘을 짜는 방향으로 선회하였습니다. 하지만 Graph를 접하고 흥미를 느낄 수 있는 계기가 되었습니다. 

코드: [Github](https://github.com/SuhwanMylife/CJDaehan_competition/blob/main/최종_제출_결과물.ipynb)

<br>

**결과: 제약사항에 맞는 알고리즘 최종 구현 실패**

- 처음에 4명으로 시작했던 팀이 2명으로 줄어들고, 코딩을 할 수 있는 사람이 저 혼자였기 때문에 혼자서 알고리즘 구현을 하기에는 많은 무리가 있었던 것 같습니다. 아무래도 과제의 난이도가 많이 높았기 때문에 아닌가 싶습니다. 공모전이 끝난 후의 후회는 거의 없습니다. 정말 최선을 다했고, 비록 결과는 아쉽습니다만은 얻은 것이 분명히 있기 때문입니다.

<br>

**최종 목표: 유전 알고리즘 적용**

- 만약 문제 없이 잘 돌아가는 하나의 휴리스틱한 알고리즘 설계에 성공했다면, 그 속의 여러 파라미터들을 조정해가며 생기는 수많은 알고리즘으로부터 얻은 route 데이터를 input으로 하는 유전 알고리즘을 짜보고자 하였습니다. 이렇게 했을 때 운영 비용 측면에서 더 좋은 결과를 얻을 수 있지 않을까 싶었지만, 시간 상의 이유로 구현하지 못했습니다.

<br>

**최종 결과물에 대한 간략한 설명**

- 배차 시 차량의 동선을 기존에 있던 터미널로 돌아오는 방식을 채택하여 실험을 진행했습니다. 그만큼 차량을 사용할 수 없는 시간이 늘었고, 때문에 실행 도중에 배차할 차량이 부족하여 다른 터미널에서 차량을 빼오다 못해 계속해서 ‘배차할 차량이 없습니다’라는 멘트를 남발하였습니다. 시간이 조금 더 주어졌다면 다음 두 조치를 진행하지 않았을까 싶습니다.
    1. 터미널의 최종 목적지를 처리한 주문의 착지(도착지) 근처의 터미널로 배정하여 최대한 이동 동선을 줄이고, 차량이 쉬는 시간을 최소화하는 알고리즘을 더 고민합니다.
    2. 가장 최대적재량이 많은 유형의 차량의 경우, 그만큼 운행 비용도 많이 들어 자주 배차해주지 못했습니다. 이 차량의 배차를 간간히 섞어 배차할 차량이 없어지는 현상을 완화해보려 하지 않았을까 싶습니다.

<br>

참고로, 모든 코드는 **본인**이 짰음을 알려드립니다. (물론, ChatGPT의 도움을 받았습니다.)

<br>

# 공모전 개요

- 과제 설명: 실시간으로 장거리 수송주문이 들어오고, 다수의 기사가 이를 수행하는 환경에서 모든 기사가 운행하는데 들어가는 비용이 최소화되도록 이동 중인 기사들에게 실시간으로 주문을 할당하는 알고리즘 개발
- 대회 진행 기간: 23. 6. 30. ~ 8. 15. (약 6주)
- 알고리즘 구현 코드: [https://github.com/SuhwanMylife/CJ_future_technolony_challenge/blob/main/최종 알고리즘.ipynb](https://github.com/SuhwanMylife/CJ_future_technolony_challenge/blob/main/%EC%B5%9C%EC%A2%85%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.ipynb)
    - 편집기에서 ipynb 실행 시 오류가 나는 경우가 많아 terminal에서 py 파일로 변환하여 실행한 결과를 캡처하였습니다.
    
    ![Untitled](https://github.com/SuhwanMylife/CJDaehan_competition/assets/70688382/5c9fb428-aa0d-4cd9-ba4e-c6d42cc3dfb6)

    
    ![Untitled 1](https://github.com/SuhwanMylife/CJDaehan_competition/assets/70688382/077dcc18-68c8-4bd4-96f4-86fa717c1c8a)
    

<br>

### 알고리즘 개요

```python
배치마다 반복 (일정 시간마다 주어지는 주문 list)
    터미널마다 반복*

        해당 터미널에 상주하는 차량 목록 가져오기

        군집마다 반복

            배치에서 해당 터미널의 해당 군집의 주문 데이터만 추출 (orders_cluster)
            orders_cluster의 time window 고유값 추출

            추출한 time window마다 반복
                time window와 주문 데드라인(배치 생성일로부터 72시간) 고려하여 배차 진행
```

time window 고려를 위해 datetime 객체를 다수 사용하였습니다.

<br>

주요 알고리즘: 병렬화 알고리즘

- 전체 코드 실행 완료에 꽤나 많은 시간이 소요되어 적용시켰습니다. 터미널마다 반복*하는 과정에서 각 터미널별로 병렬화를 진행하였습니다. 다만, Vehicle 클래스에서 생성한 객체 정보 수정 시 다른 쓰레드에서 같은 차량을 배차하는 경우를 방지하기 위해 다음과 같이 `threading.Lock()`을 추가하였습니다.

```python
with dispatch_lock:
	  if total_time > 360:
	      if final_vehicle.dispatched > 0:
	          print("이미 다른 터미널에서 배차한 차량입니다.")
	          already_used_vehicle_or_not = False
	          return orders_timewindow, already_used_vehicle_or_not, already_dispatched_order_or_not
	      final_vehicle.dispatched = 1
	  elif total_time > 720:
	      final_vehicle.dispatched = 2
	
	  for order in final_orders:   # 주문 목록에서 배정된 주문 완료 (delivered=1)
	      condition_order = final_order_table['주문ID'] == order.order_id
	      if order.delivered > 0:
	          print("이미 다른 차량이 배차한 주문입니다.")
	          already_dispatched_order_or_not = False
	          return orders_timewindow, already_used_vehicle_or_not, already_dispatched_order_or_not
	      order.delivered = 1
	      # 최종 주문 테이블 최신화
	      final_order_table.loc[condition_order, 'VehicleID'] = final_vehicle.veh_num
```

<br>

### 데이터 개요

주어진 데이터(테이블): veh_table, terminals, orders_table, od_matrix

- veh_table: 차량 정보. 각 차량의 최대적재량, 현재 위치, 고정 비용, 운행 거리 비례 비용 등 제공
- terminals: 터미널 정보. 각 터미널의 위치 제공
- orders_table: 주문 정보. 각 주문의 하차지 위치, CBM(물품에 대한 부피), time window, 현재 주문 위치, 배치 시간(주문 생성 시점) 등 제공
- od_matrix: 모든 지점 간의 이동 거리, 이동 시간 제공

